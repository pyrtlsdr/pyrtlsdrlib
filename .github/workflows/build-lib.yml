name: Build librtlsdr

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch:
    inputs:
      allow_deploy:
        description: 'Deploy with twine'
        required: true
        type: boolean

jobs:
  build-linux:
    env:
      PY_PATH: '/opt/python/cp310-cp310/bin/python'
    strategy:
      fail-fast: false
      matrix:
        include:
          - image-name: quay.io/pypa/manylinux_2_28_x86_64:2023-07-14-55e4124
            abi: manylinux_2_28
            pkg-mgr: dnf
            arch: x86_64
          - image-name: quay.io/pypa/manylinux2014_x86_64:2023-07-14-55e4124
            abi: manylinux2014
            pkg-mgr: yum
            arch: x86_64
    runs-on:
      ubuntu-latest
    container:
      image: ${{ matrix.image-name }}
    steps:
      - uses: actions/checkout@v2

      - name: Show Platform Info
        run: |
          uname -a
          ls -al /opt/python
          echo "python path: $PY_PATH"
          $PY_PATH -V
          $PY_PATH -c "import distutils;print(distutils.util.get_platform())"

      - name: Install dependencies
        run: |
          ${{ matrix.pkg-mgr }} install -y libusbx-devel
          $PY_PATH -m venv venv
          ./venv/bin/python -m pip install pygithub requests loguru build json-object-factory click pytest
          ./venv/bin/python -m pip install -e .

      - name: Build librtlsdr source
        run: ./venv/bin/python tools/get_releases.py --build-types source
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test custom build
        run: ./venv/bin/python -m pytest tests/test_custom_build.py

      - name: Build wheel
        run: ./venv/bin/python -m build -w
        env:
          PYRTLSDRLIB_PLATFORM: 'linux'
          PYRTLSDRLIB_ARCH: ${{ matrix.arch }}

      - name: Audit Wheel
        run: |
          ls -alh dist
          auditwheel show dist/*
      - name: Repair Wheel
        run: |
          auditwheel repair dist/*
          ls -alh wheelhouse
          rm dist/*
      - name: Test wheel files
        run: ./venv/bin/python -m pytest tests/test_wheel_files.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: 'dists'
          path: 'wheelhouse/*'

  build-aarch64:
    env:
      PY_PATH: '/opt/python/cp310-cp310/bin/python'
    strategy:
      fail-fast: false
      matrix:
        include:
          - image-name: quay.io/pypa/manylinux_2_28_aarch64
            abi: manylinux_2_28
            pkg-mgr: dnf
            arch: aarch64
          - image-name: quay.io/pypa/manylinux2014_aarch64
            abi: manylinux2014
            pkg-mgr: yum
            arch: aarch64
    runs-on:
      ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build docker env file
        run: |
          echo "PYRTLSDR_PLATFORM=linux" >> dockerenv.list
          echo "PYRTLSDR_ARCH=${{ matrix.arch }}" >> dockerenv.list
          echo "PY_PATH=$PY_PATH" >> dockerenv.list
          echo "PKG_MGR=${{ matrix.pkg-mgr }}" >> dockerenv.list
          echo "PLAT=${{ matrix.abi }}_${{ matrix.arch }}" >> dockerenv.list
          cat dockerenv.list

      - name: Download image
        run: docker pull "${{ matrix.image-name }}"

      - name: Build in container
        run: |
          docker run -e "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" --env-file dockerenv.list -v `pwd`:/io ${{ matrix.image-name }} /io/.github/build_in_docker.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: 'dists'
          path: 'wheelhouse/*'


  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, macos-12]
        arch: [x86_64, arm64]
    runs-on:
      ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: MatteoH2O1999/setup-python@v1
        with:
          python-version: '3.10.12'
          cache-build: true
          cache: 'pipenv'
      - name: Get macos info
        id: macos-info
        run: |
          BOTTLE_TAG=$(python tools/macos_version.py --force-version ${{ matrix.os }})
          echo "BOTTLE_TAG=${{ matrix.arch }}_${BOTTLE_TAG}"
          echo "BOTTLE_TAG=${{ matrix.arch }}_${BOTTLE_TAG}" >> $GITHUB_OUTPUT
      - name: Uninstall libusb
        continue-on-error: true
        run: brew uninstall --ignore-dependencies libusb
      - name: Install libusb
        run: |
          brew fetch --force --bottle-tag $BOTTLE_TAG libusb
          export BOTTLE_PATH=$(brew --cache --bottle-tag=$BOTTLE_TAG libusb)
          brew install $BOTTLE_PATH
        env:
          BOTTLE_TAG: ${{ steps.macos-info.outputs.BOTTLE_TAG }}

      - name: Install dependencies
        run: |
          python -m pip install pipenv
          pipenv install --dev

      - name: Build librtlsdr source
        run: pipenv run python tools/get_releases.py --build-types source --macos-arch=$MACOS_ARCH
        env:
          MACOS_ARCH: ${{ matrix.arch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test custom build
        run: pipenv run py.test tests/test_custom_build.py
        env:
          MACOS_ARCH: ${{ matrix.arch }}

      - name: Build macos wheel
        run: pipenv run python -m build -w
        env:
          PYRTLSDRLIB_PLATFORM: macos
          PYRTLSDRLIB_ARCH: ${{ matrix.arch }}

      - name: Test wheel files
        run: pipenv run py.test tests/test_wheel_files.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: 'dists'
          path: 'dist/*'


  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: MatteoH2O1999/setup-python@v1
        with:
          python-version: '3.10.12'
          cache-build: true
          cache: 'pipenv'
      - name: Install pipenv
        run: python -m pip install pipenv
      - name: Install dependencies
        run: |
          pipenv lock
          pipenv install --dev

      - name: Get librtlsdr release
        run: pipenv run python tools/get_releases.py --build-types windows --build-types w32 --build-types w64 --build-types static

      - name: Test build
        run: pipenv run py.test tests/test_repo_build.py

      - name: Build win32 wheel
        run: pipenv run python -m build -w
        env:
          PYRTLSDRLIB_PLATFORM: windows
          PYRTLSDRLIB_ARCH: win32

      - name: Build win64 wheel
        run: pipenv run python -m build -w
        env:
          PYRTLSDRLIB_PLATFORM: windows
          PYRTLSDRLIB_ARCH: win64

      - name: Test wheel files
        run: pipenv run py.test tests/test_wheel_files.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: 'dists'
          path: 'dist/*'

  test:
    needs: [build-linux, build-aarch64, build-macos, build-windows]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-11, macos-12, macos-13, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    # TODO:  Disable this once macos-13 exits "beta"
    continue-on-error: ${{ matrix.os == 'macos-13' }}
    runs-on:
      ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: pyrtlsdr/pyrtlsdr

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: 'dists'
          path: dist

      - name: Install dependencies
        run: |
          python -m pip install -U pip

      - name: Install pyrtlsdrlib from wheel
        run: pip install --no-index --find-links dist pyrtlsdrlib

      - name: Install pyrtlsdr
        run: pip install -e .

      - name: Test rtlsdr import
        run: python -c 'import rtlsdr;'


  deploy:
    needs: test
    if: ${{ success() && (github.event.inputs.allow_deploy == 'true') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: 'dists'
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
